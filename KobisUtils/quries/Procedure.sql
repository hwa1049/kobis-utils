DROP PROCEDURE IF EXISTS `SP_KNRRCLINK_MIGRATION`;
delimiter ;;
CREATE PROCEDURE `SP_KNRRCLINK_MIGRATION`()
BEGIN
	DECLARE done INT DEFAULT FALSE;
	DECLARE SDS_NO_VAL INTEGER;
	DECLARE BANK_NAME_VAL varchar(20);
	DECLARE CATEGORY_FIRST_VAL varchar(20);
	DECLARE CATEGORY_SECOND_VAL varchar(20);
	DECLARE GENUS_VAL varchar(20);
	DECLARE SPECIES_VAL varchar(20);
	DECLARE ISO_SOURCE_VAL varchar(20);
	DECLARE INS_CD_VAL varchar(20);
	DECLARE IN_DT_VAL datetime;
	DECLARE SCIENTIFIC_NAME varchar(100);
	DECLARE TAB_ID int(11);

	DECLARE NCBI_TAXON int(11);
	DECLARE GBIF_TAXON int(11);
	DECLARE ITIS_TAXON int(11);
	DECLARE KOBIC_TAXON int(11);

	DECLARE TAXONOMY_STRING varchar(100);

	DECLARE CNT integer;
	DECLARE RET_VAL varchar(100);

	-- 커서로 만들 데이타 값들
	DECLARE cur1 CURSOR FOR 
		SELECT
			SDS_NO
			, BANK_NAME as institution
			, CATEGORY_FIRST as category_1
			, CATEGORY_SECOND as category_2
			, GENUS	as genus
			, SPECIES	as species
			, ISO_SOURCE as source
			, 'INS00006' as ins_cd
			, CURRENT_TIMESTAMP() as in_dt
		FROM T9_KNRRC_RESOURCE;

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

	SET RET_VAL = '';
	SET CNT=0;
	SET TAB_ID = -1;

	OPEN cur1;

	cur1: LOOP
		FETCH cur1 INTO SDS_NO_VAL, BANK_NAME_VAL, CATEGORY_FIRST_VAL, CATEGORY_SECOND_VAL, GENUS_VAL, SPECIES_VAL, ISO_SOURCE_VAL, INS_CD_VAL, IN_DT_VAL;

		SET SCIENTIFIC_NAME = CONCAT(GENUS_VAL, ' ', SPECIES_VAL);

-- 		SELECT IFNULL(MAX(tab_id), -1) INTO TAB_ID FROM T1_ClassificationSystemTable WHERE scientific_name=SCIENTIFIC_NAME;
		SELECT tab_id, SCIENTIFIC_NAME FROM T1_ClassificationSystemTable WHERE scientific_name=SCIENTIFIC_NAME;

-- 		IF TAB_ID = -1 THEN
-- 			SELECT SF_MAPPING_TAXONOMIES( CONCAT(GENUS_VAL, ' ', SPECIES_VAL) ) into TAXONOMY_STRING;
-- 
-- 			SELECT 
-- 				REPLACE(SPLIT_STR(TAXONOMY_STRING, '|', 1), 'empty' ,'')
-- 				, REPLACE(SPLIT_STR(TAXONOMY_STRING, '|', 2), 'empty' ,'')
-- 				, REPLACE(SPLIT_STR(TAXONOMY_STRING, '|', 3), 'empty' ,'')
-- 				, REPLACE(SPLIT_STR(TAXONOMY_STRING, '|', 4), 'empty' ,'') 
-- 			INTO NCBI_TAXON, GBIF_TAXON, ITIS_TAXON, KOBIC_TAXON;
-- 
-- 			SELECT NCBI_TAXON, GBIF_TAXON, ITIS_TAXON, KOBIC_TAXON;
-- 		END IF;

		SET CNT = CNT+1;

		IF CNT > 3 THEN
			LEAVE cur1;
		END IF;

		IF done THEN
			LEAVE cur1;
		END IF;
	END LOOP;

  -- 커서를 닫는다. 
	CLOSE cur1;
END
;;
delimiter ;

call SP_KNRRCLINK_MIGRATION();